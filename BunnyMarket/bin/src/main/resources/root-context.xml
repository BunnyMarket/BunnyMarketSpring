<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@localhost:1521:xe" />
		<!-- 윈도우는 1572인가..1571인가.. -->
		<property name="username" value="BUNNY" />
		<property name="password" value="BUNNY" />
	</bean>

	<!-- Mybatis 연동 설정 -->
	<bean id="sqlSessionFactoryBean"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations"
			value="classpath*:mappers/*.xml" />
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
	</bean>

	<!-- Mybatis 사용과 관련된 sqlSessionTemplate 등록하기 -->
	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryBean" />
	</bean>

	<!-- 트랜잭션 처리와 관련된 매니저 객체 설정 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- Gmail -->
	<bean id="javaMailSesnder"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.naver.com" />
		<property name="port" value="465" />
		<property name="username" value="model_so@naver.com" />
		<property name="password" value="zxc2754" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>

	<!-- 트랜잭션 처리 방식 -->
	<!-- 커밋/롤백은 모든 메소드에 동작시켜야 하기 때문에 프로그래밍적인 방식을 메소드마다 지정해야하기 때문에 선언적 방식을 더 
		선호한다. -->

	<!-- 프로그래밍적 방식은 여러 메소드나 클래스에 대해서 다중으로 선언해야 하며, 데이터를 관리하는 측면에서 어떤 트랜잭션 속성이 
		적용되었는지 찾기 힘들기 때문에 일반적으로 선언적 방식을 선호한다. -->
	<!-- 선언적(XML) 방식 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 트랜잭션을 처리할 메소드 정의 -->
			<tx:method name="select*" rollback-for="Exception" read-only="true" />
				<!-- select하던 중 Exception이 발생하면 rollback.. DB는 읽기만하게. 
				select할때 insert/delete/update가 안되게. -->
			<tx:method name="insert*" rollback-for="Exception" /><!-- Exception이 
				발생하면 rollback하게 지정. insert/update/delete로 시작하는 메소드들만. -->
			<tx:method name="update*" rollback-for="Exception" />
			<tx:method name="delete*" rollback-for="Exception" />
		</tx:attributes>

	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:pointcut
			expression="execution(* com.kh.bunny..*ServiceImpl.*(..))"
			id="servicePc" />
		<aop:advisor id="transactionAdvisor" advice-ref="txAdvice"
			pointcut-ref="servicePc" />
	</aop:config>

</beans>

